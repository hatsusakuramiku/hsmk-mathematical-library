classdef TetrahedronSimplexIntegral < handle
    % TetrahedronSimplexIntegral is a class which contains the integration
    % Example:
    %   vertices = [0 0 0; 1 0 0; 0 1 0; 0 0 1];
    %   func = @(x,y,z) x + y + z;
    %   tetrahedron = Tetrahedron(vertices);
    %   integralRsult = TetrahedronSimplexIntegral.integrate(tetrahedron, func, 'ORDER4POINT23');

    properties (Access = public, Constant = true)
        % Formulas is a cell array of strings for the different integration
        % rules we support. The string is the name of the method.
        formulas = {'ORDER1POINT4', 'ORDER4POINT23', 'ORDER7POINT50_v1', 'ORDER7POINT50_v2'};

        % ORDER1POINT4 is a 4x4 matrix which contains the x, y, z, and weight
        % values for the ORDER1POINT4 integration rule.
        ORDER1POINT4 = [0.0, 0.0, 0.0, 0.041666666666666664; 1.0, 0.0, 0.0, 0.041666666666666664; 0.0, 1.0, 0.0, 0.041666666666666664; 0.0, 0.0, 1.0, 0.041666666666666664; ];

        % ORDER4POINT23 is a 23x4 matrix which contains the x, y, z, and
        % weight values for the ORDER4POINT23 integration rule.
        ORDER4POINT23 = [0.0, 0.0, 0.0, 2.1660180293730486E-4; 1.0, 0.0, 0.0, 2.1660180293730486E-4; 0.0, 1.0, 0.0, 2.1660180293730486E-4; 0.0, 0.0, 1.0, 2.1660180293730486E-4; 0.0, 0.5, 0.0, 0.0012522181731301932; 0.5, 0.5, 0.0, 0.0012522181731301932; 0.5, 0.0, 0.0, 0.0012522181731301932; 0.0, 0.0, 0.5, 0.0012522181731301932; 0.5, 0.0, 0.5, 0.0012522181731301932; 0.0, 0.5, 0.5, 0.0012522181731301932; 0.25, 0.25, 0.25, 0.050793650793650794; 0.18858048469644506, 0.18858048469644506, 0.0, 0.008957774968540458; 0.0, 0.18858048469644506, 0.18858048469644506, 0.008957774968540458; 0.18858048469644506, 0.0, 0.18858048469644506, 0.008957774968540458; 0.18858048469644506, 0.18858048469644506, 0.6228390306071099, 0.008957774968540458; 0.6228390306071099, 0.18858048469644506, 0.18858048469644506, 0.008957774968540458; 0.18858048469644506, 0.6228390306071099, 0.18858048469644506, 0.008957774968540458; 0.6228390306071099, 0.18858048469644506, 0.0, 0.008957774968540458; 0.18858048469644506, 0.6228390306071099, 0.0, 0.008957774968540458; 0.0, 0.6228390306071099, 0.18858048469644506, 0.008957774968540458; 0.0, 0.18858048469644506, 0.6228390306071099, 0.008957774968540458; 0.6228390306071099, 0.0, 0.18858048469644506, 0.008957774968540458; 0.18858048469644506, 0.0, 0.6228390306071099, 0.008957774968540458; ];

        % ORDER7POINT50_v1 is a 50x4 matrix which contains the x, y, z, and
        % weight values for the ORDER7POINT50_v1 integration rule.
        ORDER7POINT50_v1 = [0.0, 0.0, 0.0, 2.143608668049743E-4; 1.0, 0.0, 0.0, 2.143608668049743E-4; 0.0, 1.0, 0.0, 2.143608668049743E-4; 0.0, 0.0, 1.0, 2.143608668049743E-4; 0.2928294047674109, 0.0, 0.0, 8.268179517797114E-4; 0.7071705952325891, 0.0, 0.0, 8.268179517797114E-4; 0.0, 0.7071705952325891, 0.0, 8.268179517797114E-4; 0.0, 0.2928294047674109, 0.0, 8.268179517797114E-4; 0.0, 0.0, 0.2928294047674109, 8.268179517797114E-4; 0.0, 0.0, 0.7071705952325891, 8.268179517797114E-4; 0.2928294047674109, 0.0, 0.7071705952325891, 8.268179517797114E-4; 0.7071705952325891, 0.0, 0.2928294047674109, 8.268179517797114E-4; 0.0, 0.2928294047674109, 0.7071705952325891, 8.268179517797114E-4; 0.0, 0.7071705952325891, 0.2928294047674109, 8.268179517797114E-4; 0.2928294047674109, 0.7071705952325891, 0.0, 8.268179517797114E-4; 0.7071705952325891, 0.2928294047674109, 0.0, 8.268179517797114E-4; 0.1972862280257976, 0.1972862280257976, 0.0, 0.00184017790419186; 0.0, 0.1972862280257976, 0.1972862280257976, 0.00184017790419186; 0.1972862280257976, 0.0, 0.1972862280257976, 0.00184017790419186; 0.1972862280257976, 0.1972862280257976, 0.6054275439484048, 0.00184017790419186; 0.6054275439484048, 0.1972862280257976, 0.1972862280257976, 0.00184017790419186; 0.1972862280257976, 0.6054275439484048, 0.1972862280257976, 0.00184017790419186; 0.6054275439484048, 0.1972862280257976, 0.0, 0.00184017790419186; 0.1972862280257976, 0.6054275439484048, 0.0, 0.00184017790419186; 0.0, 0.6054275439484048, 0.1972862280257976, 0.00184017790419186; 0.0, 0.1972862280257976, 0.6054275439484048, 0.00184017790419186; 0.6054275439484048, 0.0, 0.1972862280257976, 0.00184017790419186; 0.1972862280257976, 0.0, 0.6054275439484048, 0.00184017790419186; 0.4256461243139345, 0.4256461243139345, 0.0, 0.00183132432924565; 0.0, 0.4256461243139345, 0.4256461243139345, 0.00183132432924565; 0.4256461243139345, 0.0, 0.4256461243139345, 0.00183132432924565; 0.4256461243139345, 0.4256461243139345, 0.148707751372131, 0.00183132432924565; 0.148707751372131, 0.4256461243139345, 0.4256461243139345, 0.00183132432924565; 0.4256461243139345, 0.148707751372131, 0.4256461243139345, 0.00183132432924565; 0.148707751372131, 0.4256461243139345, 0.0, 0.00183132432924565; 0.4256461243139345, 0.148707751372131, 0.0, 0.00183132432924565; 0.0, 0.148707751372131, 0.4256461243139345, 0.00183132432924565; 0.0, 0.4256461243139345, 0.148707751372131, 0.00183132432924565; 0.148707751372131, 0.0, 0.4256461243139345, 0.00183132432924565; 0.4256461243139345, 0.0, 0.148707751372131, 0.00183132432924565; 0.09503775858394108, 0.09503775858394108, 0.09503775858394108, 0.007542468904648131; 0.7148867242481768, 0.09503775858394108, 0.09503775858394108, 0.007542468904648131; 0.09503775858394108, 0.7148867242481768, 0.09503775858394108, 0.007542468904648131; 0.09503775858394108, 0.09503775858394108, 0.7148867242481768, 0.007542468904648131; 0.1252462362578136, 0.1252462362578136, 0.3747537637421864, 0.01360991755970793; 0.1252462362578136, 0.3747537637421864, 0.1252462362578136, 0.01360991755970793; 0.3747537637421864, 0.1252462362578136, 0.1252462362578136, 0.01360991755970793; 0.1252462362578136, 0.3747537637421864, 0.3747537637421864, 0.01360991755970793; 0.3747537637421864, 0.1252462362578136, 0.3747537637421864, 0.01360991755970793; 0.3747537637421864, 0.3747537637421864, 0.1252462362578136, 0.01360991755970793; ];
        ORDER7POINT50_v2 = [0.0, 0.0, 0.0, 2.32196887234893E-4; 1.0, 0.0, 0.0, 2.32196887234893E-4; 0.0, 1.0, 0.0, 2.32196887234893E-4; 0.0, 0.0, 1.0, 2.32196887234893E-4; 0.305259875669566, 0.0, 0.0, 7.328680241632055E-4; 0.694740124330434, 0.0, 0.0, 7.328680241632055E-4; 0.0, 0.694740124330434, 0.0, 7.328680241632055E-4; 0.0, 0.305259875669566, 0.0, 7.328680241632055E-4; 0.0, 0.0, 0.305259875669566, 7.328680241632055E-4; 0.0, 0.0, 0.694740124330434, 7.328680241632055E-4; 0.305259875669566, 0.0, 0.694740124330434, 7.328680241632055E-4; 0.694740124330434, 0.0, 0.305259875669566, 7.328680241632055E-4; 0.0, 0.305259875669566, 0.694740124330434, 7.328680241632055E-4; 0.0, 0.694740124330434, 0.305259875669566, 7.328680241632055E-4; 0.305259875669566, 0.694740124330434, 0.0, 7.328680241632055E-4; 0.694740124330434, 0.305259875669566, 0.0, 7.328680241632055E-4; 0.4204599755540437, 0.4204599755540437, 0.0, 0.002529792598144742; 0.0, 0.4204599755540437, 0.4204599755540437, 0.002529792598144742; 0.4204599755540437, 0.0, 0.4204599755540437, 0.002529792598144742; 0.4204599755540437, 0.4204599755540437, 0.15908004889191263, 0.002529792598144742; 0.15908004889191263, 0.4204599755540437, 0.4204599755540437, 0.002529792598144742; 0.4204599755540437, 0.15908004889191263, 0.4204599755540437, 0.002529792598144742; 0.15908004889191263, 0.4204599755540437, 0.0, 0.002529792598144742; 0.4204599755540437, 0.15908004889191263, 0.0, 0.002529792598144742; 0.0, 0.15908004889191263, 0.4204599755540437, 0.002529792598144742; 0.0, 0.4204599755540437, 0.15908004889191263, 0.002529792598144742; 0.15908004889191263, 0.0, 0.4204599755540437, 0.002529792598144742; 0.4204599755540437, 0.0, 0.15908004889191263, 0.002529792598144742; 0.1480462980008327, 0.1480462980008327, 0.0, 0.001564461923378417; 0.0, 0.1480462980008327, 0.1480462980008327, 0.001564461923378417; 0.1480462980008327, 0.0, 0.1480462980008327, 0.001564461923378417; 0.1480462980008327, 0.1480462980008327, 0.7039074039983346, 0.001564461923378417; 0.7039074039983346, 0.1480462980008327, 0.1480462980008327, 0.001564461923378417; 0.1480462980008327, 0.7039074039983346, 0.1480462980008327, 0.001564461923378417; 0.7039074039983346, 0.1480462980008327, 0.0, 0.001564461923378417; 0.1480462980008327, 0.7039074039983346, 0.0, 0.001564461923378417; 0.0, 0.7039074039983346, 0.1480462980008327, 0.001564461923378417; 0.0, 0.1480462980008327, 0.7039074039983346, 0.001564461923378417; 0.7039074039983346, 0.0, 0.1480462980008327, 0.001564461923378417; 0.1480462980008327, 0.0, 0.7039074039983346, 0.001564461923378417; 0.1048645248917035, 0.1048645248917035, 0.1048645248917035, 0.007127911446564579; 0.6854064253248895, 0.1048645248917035, 0.1048645248917035, 0.007127911446564579; 0.1048645248917035, 0.6854064253248895, 0.1048645248917035, 0.007127911446564579; 0.1048645248917035, 0.1048645248917035, 0.6854064253248895, 0.007127911446564579; 0.1258796196682507, 0.1258796196682507, 0.3741203803317493, 0.0132167937972054; 0.1258796196682507, 0.3741203803317493, 0.1258796196682507, 0.0132167937972054; 0.3741203803317493, 0.1258796196682507, 0.1258796196682507, 0.0132167937972054; 0.1258796196682507, 0.3741203803317493, 0.3741203803317493, 0.0132167937972054; 0.3741203803317493, 0.1258796196682507, 0.3741203803317493, 0.0132167937972054; 0.3741203803317493, 0.3741203803317493, 0.1258796196682507, 0.0132167937972054; ];
    end

    methods (Access = public, Static = true)

        function integral = integrate(tetrahedron, func, integrateName)
            % Compute the integral of a function on a tetrahedron using the
            % given integration rule.
            %
            %   integral = integrate(tetrahedron, func, integrateName)
            %
            %   Input:
            %       tetrahedron must be an instance of the Tetrahedron class.
            %       func must be a function handle.
            %       integrateName must be one of the integrateNames.
            %
            %   Output:
            %       integral is the integral of the given function on the
            %       tetrahedron.
            arguments
                tetrahedron {mustBeA(tetrahedron, 'Tetrahedron')}
                func {mustBeA(func, 'function_handle')}
                integrateName {mustBeTextScalar}
            end

            if ~ismember(upper(integrateName), TetrahedronSimplexIntegral.formulas)
                error('Unknown integrateName: %s', integrateName);
            end

            if (nargin(func) ~= 3)
                error('The function must take exactly 3 arguments');
            end

            % Check whether the function can handle vector operations
            try
                temp = tetrahedron.getVertices();
                func(temp(:, 1), temp(:, 2), temp(:, 3));
            catch
                error('Vector operations are not supported for the function');
            end

            % Transform the integration points to the tetrahedron
            transformedPoints = TetrahedronSimplexIntegral.transformPoints(tetrahedron, TetrahedronSimplexIntegral.getSimplexPoints(integrateName));

            % Compute the integral
            integral = 6 * tetrahedron.getMeasure() * sum(func(transformedPoints(:, 1), transformedPoints(:, 2), transformedPoints(:, 3)) .* transformedPoints(:, 4));
        end

        function pointAndWeights = transformPoints(tetrahedron, integralPoints)
            % Transform the given integral points to the real coordinates of the
            % given tetrahedron.
            %
            %   transformedPoints = TetrahedronSimplexIntegral.transformPoints(tetrahedron, integralPoints)
            %
            %   Input:
            %       tetrahedron must be an instance of the Tetrahedron class.
            %       integralPoints must be a matrix of size (numPoints, 4) containing
            %           the coordinates of the points in the integral.
            %
            %   Output:
            %       transformedPoints is a matrix of size (numPoints, 3) containing
            %           the coordinates of the points in the tetrahedron.

            arguments
                tetrahedron {mustBeA(tetrahedron, 'Tetrahedron')}
                integralPoints (:, 4) {mustBeReal, mustBeFinite}
            end

            vertices = tetrahedron.getVertices();
            pointAndWeights = zeros(size(integralPoints));

            % Compute the coordinates of the points in the tetrahedron using the
            % transformation formulas.
            a = integralPoints(:, 1);
            b = integralPoints(:, 2);
            c = integralPoints(:, 3);
            d = 1 - a - b - c;
            pointAndWeights(:, 1) = a .* vertices(1, 1) + b .* vertices(2, 1) + c .* vertices(3, 1) + d .* vertices(4, 1); % x
            pointAndWeights(:, 2) = a .* vertices(1, 2) + b .* vertices(2, 2) + c .* vertices(3, 2) + d .* vertices(4, 2); % y
            pointAndWeights(:, 3) = a .* vertices(1, 3) + b .* vertices(2, 3) + c .* vertices(3, 3) + d .* vertices(4, 3); % z
            pointAndWeights(:, 4) = integralPoints(:, 4);
        end

    end

    methods (Access = private, Static = true)

        

        function points = getSimplexPoints(integrateName)
            % Get the integration points for the given integrate name.
            %
            %   points = TetrahedronSimplexIntegral.getSimplexPoints(integrateName)
            %
            %   Input:
            %       integrateName must be a string containing the name of the
            %           integrate.
            %
            %   Output:
            %       points is a matrix of size (numPoints, 4) containing the
            %           coordinates of the points in the integrate.
            arguments
                integrateName {mustBeTextScalar}
            end

            switch integrateName
                case 'ORDER1POINT4'
                    % 1-point Gauss-Legendre integration rule.
                    points = TetrahedronSimplexIntegral.ORDER1POINT4;
                case 'ORDER4POINT23'
                    % 4-point Gauss-Legendre integration rule.
                    points = TetrahedronSimplexIntegral.ORDER4POINT23;
                case 'ORDER7POINT50_v1'
                    % 7-point integration rule.
                    points = TetrahedronSimplexIntegral.ORDER7POINT50_v1;
                case 'ORDER7POINT50_v2'
                    % 7-point integration rule.
                    points = TetrahedronSimplexIntegral.ORDER7POINT50_v2;
                otherwise
                    error('Unknown integrateName: %s', integrateName);
            end

        end

    end

end
